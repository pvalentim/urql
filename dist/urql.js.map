{"version":3,"file":"urql.js","sources":["../src/utils/error.ts","../src/utils/hash.ts","../src/utils/stringifyVariables.ts","../src/utils/request.ts","../src/utils/result.ts","../src/utils/typenames.ts","../src/utils/withPromise.ts","../src/utils/index.ts","../src/exchanges/ssr.ts","../src/exchanges/cache.ts","../src/exchanges/subscription.ts","../src/exchanges/debug.ts","../src/exchanges/dedup.ts","../src/exchanges/fetch.ts","../src/exchanges/fallback.ts","../src/exchanges/compose.ts","../src/exchanges/index.ts","../src/client.ts","../src/utils/toSuspenseSource.ts","../src/context.ts","../src/hooks/useImmediateState.ts","../src/hooks/useMutation.ts","../src/hooks/useRequest.ts","../src/hooks/useImmediateEffect.ts","../src/hooks/useQuery.ts","../src/hooks/useSubscription.ts","../src/components/Mutation.ts","../src/components/Query.ts","../src/components/Subscription.ts"],"sourcesContent":["import { GraphQLError } from 'graphql';\n\nconst generateErrorMessage = (\n  networkErr?: Error,\n  graphQlErrs?: GraphQLError[]\n) => {\n  let error = '';\n  if (networkErr !== undefined) {\n    return (error = `[Network] ${networkErr.message}`);\n  }\n\n  if (graphQlErrs !== undefined) {\n    graphQlErrs.forEach(err => {\n      error += `[GraphQL] ${err.message}\\n`;\n    });\n  }\n\n  return error.trim();\n};\n\nconst rehydrateGraphQlError = (error: any): GraphQLError => {\n  if (typeof error === 'string') {\n    return new GraphQLError(error);\n  } else if (typeof error === 'object' && error.message) {\n    return new GraphQLError(\n      error.message,\n      error.nodes,\n      error.source,\n      error.positions,\n      error.path,\n      error.originalError,\n      error.extensions || {}\n    );\n  } else {\n    return error as any;\n  }\n};\n\n/** An error which can consist of GraphQL errors and Network errors. */\nexport class CombinedError extends Error {\n  public name: string;\n  public message: string;\n  public graphQLErrors: GraphQLError[];\n  public networkError?: Error;\n  public response?: any;\n\n  constructor({\n    networkError,\n    graphQLErrors,\n    response,\n  }: {\n    networkError?: Error;\n    graphQLErrors?: Array<string | GraphQLError | Error>;\n    response?: any;\n  }) {\n    const normalizedGraphQLErrors = (graphQLErrors || []).map(\n      rehydrateGraphQlError\n    );\n    const message = generateErrorMessage(networkError, normalizedGraphQLErrors);\n\n    super(message);\n\n    this.name = 'CombinedError';\n    this.message = message;\n    this.graphQLErrors = normalizedGraphQLErrors;\n    this.networkError = networkError;\n    this.response = response;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n","// When we have separate strings it's useful to run a progressive\n// version of djb2 where we pretend that we're still looping over\n// the same string\nexport const phash = (h: number, x: string): number => {\n  h = h | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++) {\n    h = (h << 5) + h + x.charCodeAt(i);\n  }\n\n  return h;\n};\n\n// This is a djb2 hashing function\nexport const hash = (x: string): number => phash(5381 | 0, x) >>> 0;\n","const seen = new Set();\n\nconst stringify = (x: any): string => {\n  if (x === undefined) {\n    return '';\n  } else if (typeof x == 'number') {\n    return isFinite(x) ? '' + x : 'null';\n  } else if (typeof x !== 'object') {\n    return JSON.stringify(x);\n  } else if (x === null) {\n    return 'null';\n  }\n\n  let out = '';\n  if (Array.isArray(x)) {\n    out = '[';\n    for (let i = 0, l = x.length; i < l; i++) {\n      if (i > 0) out += ',';\n      const value = stringify(x[i]);\n      out += value.length > 0 ? value : 'null';\n    }\n\n    out += ']';\n    return out;\n  } else if (seen.has(x)) {\n    throw new TypeError('Converting circular structure to JSON');\n  }\n\n  const keys = Object.keys(x).sort();\n\n  seen.add(x);\n  out = '{';\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i];\n    const value = stringify(x[key]);\n    if (value.length !== 0) {\n      if (out.length > 1) out += ',';\n      out += stringify(key) + ':' + value;\n    }\n  }\n\n  seen.delete(x);\n  out += '}';\n  return out;\n};\n\nexport const stringifyVariables = (x: any): string => {\n  seen.clear();\n  return stringify(x);\n};\n","import { DocumentNode, parse, print } from 'graphql';\nimport { hash, phash } from './hash';\nimport { stringifyVariables } from './stringifyVariables';\nimport { GraphQLRequest, Operation, OperationContext } from '../types';\n\ninterface Documents {\n  [key: number]: DocumentNode;\n}\n\nconst hashQuery = (q: string): number => hash(q.replace(/[\\s,]+/g, ' ').trim());\n\nconst docs: Documents = Object.create(null);\nconst keyProp = '__key';\n\nexport const createRequest = (\n  q: string | DocumentNode,\n  vars?: object\n): GraphQLRequest => {\n  let key: number;\n  let query: DocumentNode;\n  if (typeof q === 'string') {\n    key = hashQuery(q);\n    query = docs[key] !== undefined ? docs[key] : parse(q);\n  } else if ((q as any)[keyProp] !== undefined) {\n    key = (q as any)[keyProp];\n    query = q;\n  } else {\n    key = hashQuery(print(q));\n    query = docs[key] !== undefined ? docs[key] : q;\n  }\n\n  docs[key] = query;\n  (query as any)[keyProp] = key;\n\n  return {\n    key: vars ? phash(key, stringifyVariables(vars)) >>> 0 : key,\n    query,\n    variables: vars || {},\n  };\n};\n\n/** Spreads the provided metadata to the source operation's meta property in context.  */\nexport const addMetadata = (\n  source: Operation,\n  meta: Exclude<OperationContext['meta'], undefined>\n) => ({\n  ...source,\n  context: {\n    ...source.context,\n    meta: {\n      ...source.context.meta,\n      ...meta,\n    },\n  },\n});\n","import { Operation, OperationResult } from '../types';\nimport { CombinedError } from './error';\n\nexport const makeResult = (\n  operation: Operation,\n  result: any,\n  response?: any\n): OperationResult => ({\n  operation,\n  data: result.data,\n  error: Array.isArray(result.errors)\n    ? new CombinedError({\n        graphQLErrors: result.errors,\n        response,\n      })\n    : undefined,\n  extensions:\n    typeof result.extensions === 'object' && result.extensions !== null\n      ? result.extensions\n      : undefined,\n});\n\nexport const makeErrorResult = (\n  operation: Operation,\n  error: Error,\n  response?: any\n): OperationResult => ({\n  operation,\n  data: undefined,\n  error: new CombinedError({\n    networkError: error,\n    response,\n  }),\n  extensions: undefined,\n});\n","import {\n  DocumentNode,\n  FieldNode,\n  InlineFragmentNode,\n  Kind,\n  visit,\n} from 'graphql';\n\ninterface EntityLike {\n  [key: string]: EntityLike | EntityLike[] | any;\n  __typename: string | null | void;\n}\n\nconst collectTypes = (obj: EntityLike | EntityLike[], types: string[] = []) => {\n  if (Array.isArray(obj)) {\n    obj.forEach(inner => {\n      collectTypes(inner, types);\n    });\n  } else if (typeof obj === 'object' && obj !== null) {\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        const val = obj[key];\n        if (key === '__typename' && typeof val === 'string') {\n          types.push(val);\n        } else if (typeof val === 'object' && val !== null) {\n          collectTypes(val, types);\n        }\n      }\n    }\n  }\n\n  return types;\n};\n\nexport const collectTypesFromResponse = (response: object) =>\n  collectTypes(response as EntityLike).filter((v, i, a) => a.indexOf(v) === i);\n\nconst formatNode = (n: FieldNode | InlineFragmentNode) => {\n  if (n.selectionSet === undefined) {\n    return false;\n  }\n\n  if (\n    n.selectionSet.selections.some(\n      s => s.kind === 'Field' && s.name.value === '__typename'\n    )\n  ) {\n    return n;\n  }\n\n  return {\n    ...n,\n    selectionSet: {\n      ...n.selectionSet,\n      selections: [\n        ...n.selectionSet.selections,\n        {\n          kind: Kind.FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: '__typename',\n          },\n        },\n      ],\n    },\n  };\n};\n\nexport const formatDocument = (astNode: DocumentNode) =>\n  visit(astNode, {\n    Field: formatNode,\n    InlineFragment: formatNode,\n  });\n","import { Source, pipe, toPromise, take } from 'wonka';\nimport { PromisifiedSource } from '../types';\n\nexport function withPromise<T>(source$: Source<T>): PromisifiedSource<T> {\n  (source$ as PromisifiedSource<T>).toPromise = () =>\n    pipe(\n      source$,\n      take(1),\n      toPromise\n    );\n  return source$ as PromisifiedSource<T>;\n}\n","export * from './error';\nexport * from './request';\nexport * from './result';\nexport * from './typenames';\nexport * from './toSuspenseSource';\nexport * from './stringifyVariables';\nexport * from './withPromise';\n\nexport const noop = () => {\n  /* noop */\n};\n","import { pipe, share, filter, merge, map, tap } from 'wonka';\nimport { Exchange, OperationResult, Operation } from '../types';\nimport { CombinedError } from '../utils';\n\nexport interface SerializedResult {\n  data?: any;\n  error?: {\n    networkError?: string;\n    graphQLErrors: string[];\n  };\n}\n\nexport interface SSRData {\n  [key: string]: SerializedResult;\n}\n\nexport interface SSRExchangeParams {\n  isClient?: boolean;\n  initialState?: SSRData;\n}\n\nexport interface SSRExchange extends Exchange {\n  /** Rehydrates cached data */\n  restoreData(data: SSRData): void;\n  /** Extracts cached data */\n  extractData(): SSRData;\n}\n\nconst shouldSkip = ({ operationName }: Operation) =>\n  operationName !== 'subscription' && operationName !== 'query';\n\n/** Serialize an OperationResult to plain JSON */\nconst serializeResult = ({\n  data,\n  error,\n}: OperationResult): SerializedResult => {\n  const result: SerializedResult = { data, error: undefined };\n  if (error !== undefined) {\n    result.error = {\n      networkError: '' + error.networkError,\n      graphQLErrors: error.graphQLErrors.map(x => '' + x),\n    };\n  }\n\n  return result;\n};\n\n/** Deserialize plain JSON to an OperationResult */\nconst deserializeResult = (\n  operation: Operation,\n  result: SerializedResult\n): OperationResult => {\n  const { error, data } = result;\n  const deserialized: OperationResult = {\n    operation,\n    data,\n    extensions: undefined,\n    error: undefined,\n  };\n  if (error !== undefined) {\n    deserialized.error = new CombinedError({\n      networkError: new Error(error.networkError),\n      graphQLErrors: error.graphQLErrors,\n    });\n  }\n\n  return deserialized;\n};\n\n/** The ssrExchange can be created to capture data during SSR and also to rehydrate it on the client */\nexport const ssrExchange = (params?: SSRExchangeParams): SSRExchange => {\n  const data: SSRData = {};\n\n  const isCached = (operation: Operation) => {\n    return !shouldSkip(operation) && data[operation.key] !== undefined;\n  };\n\n  // The SSR Exchange is a temporary cache that can populate results into data for suspense\n  // On the client it can be used to retrieve these temporary results from a rehydrated cache\n  const ssr: SSRExchange = ({ client, forward }) => ops$ => {\n    // params.isClient tells us whether we're on the client-side\n    // By default we assume that we're on the client if suspense-mode is disabled\n    const isClient =\n      params && typeof params.isClient === 'boolean'\n        ? !!params.isClient\n        : !client.suspense;\n\n    const sharedOps$ = share(ops$);\n\n    let forwardedOps$ = pipe(\n      sharedOps$,\n      filter(op => !isCached(op)),\n      forward\n    );\n\n    // NOTE: Since below we might delete the cached entry after accessing\n    // it once, cachedOps$ needs to be merged after forwardedOps$\n    let cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => isCached(op)),\n      map(op => {\n        const serialized = data[op.key];\n        return deserializeResult(op, serialized);\n      })\n    );\n\n    if (!isClient) {\n      // On the server we cache results in the cache as they're resolved\n      forwardedOps$ = pipe(\n        forwardedOps$,\n        tap((result: OperationResult) => {\n          const { operation } = result;\n          if (!shouldSkip(operation)) {\n            const serialized = serializeResult(result);\n            data[operation.key] = serialized;\n          }\n        })\n      );\n    } else {\n      // On the client we delete results from the cache as they're resolved\n      cachedOps$ = pipe(\n        cachedOps$,\n        tap((result: OperationResult) => {\n          delete data[result.operation.key];\n        })\n      );\n    }\n\n    return merge([forwardedOps$, cachedOps$]);\n  };\n\n  ssr.restoreData = (restore: SSRData) => Object.assign(data, restore);\n  ssr.extractData = () => Object.assign({}, data);\n\n  if (params && params.initialState) {\n    ssr.restoreData(params.initialState);\n  }\n\n  return ssr;\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, map, merge, pipe, share, tap } from 'wonka';\n\nimport { Client } from '../client';\nimport { Exchange, Operation, OperationResult } from '../types';\nimport {\n  addMetadata,\n  collectTypesFromResponse,\n  formatDocument,\n} from '../utils';\n\ntype ResultCache = Map<number, OperationResult>;\n\ninterface OperationCache {\n  [key: string]: Set<number>;\n}\n\nconst shouldSkip = ({ operationName }: Operation) =>\n  operationName !== 'mutation' && operationName !== 'query';\n\nexport const cacheExchange: Exchange = ({ forward, client }) => {\n  const resultCache = new Map() as ResultCache;\n  const operationCache = Object.create(null) as OperationCache;\n\n  // Adds unique typenames to query (for invalidating cache entries)\n  const mapTypeNames = (operation: Operation): Operation => ({\n    ...operation,\n    query: formatDocument(operation.query),\n  });\n\n  const handleAfterMutation = afterMutation(\n    resultCache,\n    operationCache,\n    client\n  );\n\n  const handleAfterQuery = afterQuery(resultCache, operationCache);\n\n  const isOperationCached = operation => {\n    const {\n      key,\n      operationName,\n      context: { requestPolicy },\n    } = operation;\n    return (\n      operationName === 'query' &&\n      requestPolicy !== 'network-only' &&\n      (requestPolicy === 'cache-only' || resultCache.has(key))\n    );\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n\n    const cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => !shouldSkip(op) && isOperationCached(op)),\n      map(operation => {\n        const cachedResult = resultCache.get(operation.key);\n        if (operation.context.requestPolicy === 'cache-and-network') {\n          reexecuteOperation(client, operation);\n        }\n\n        return {\n          ...cachedResult,\n          operation: addMetadata(operation, {\n            cacheOutcome: cachedResult ? 'hit' : 'miss',\n          }),\n        };\n      })\n    );\n\n    const forwardedOps$ = pipe(\n      merge([\n        pipe(\n          sharedOps$,\n          filter(op => !shouldSkip(op) && !isOperationCached(op)),\n          map(mapTypeNames)\n        ),\n        pipe(\n          sharedOps$,\n          filter(op => shouldSkip(op))\n        ),\n      ]),\n      map(op => addMetadata(op, { cacheOutcome: 'miss' })),\n      forward,\n      tap(response => {\n        if (\n          response.operation &&\n          response.operation.operationName === 'mutation'\n        ) {\n          handleAfterMutation(response);\n        } else if (\n          response.operation &&\n          response.operation.operationName === 'query'\n        ) {\n          handleAfterQuery(response);\n        }\n      })\n    );\n\n    return merge([cachedOps$, forwardedOps$]);\n  };\n};\n\n// Reexecutes a given operation with the default requestPolicy\nconst reexecuteOperation = (client: Client, operation: Operation) => {\n  return client.reexecuteOperation({\n    ...operation,\n    context: {\n      ...operation.context,\n      requestPolicy: 'network-only',\n    },\n  });\n};\n\n// Invalidates the cache given a mutation's response\nexport const afterMutation = (\n  resultCache: ResultCache,\n  operationCache: OperationCache,\n  client: Client\n) => (response: OperationResult) => {\n  const pendingOperations = new Set<number>();\n\n  collectTypesFromResponse(response.data).forEach(typeName => {\n    const operations =\n      operationCache[typeName] || (operationCache[typeName] = new Set());\n    operations.forEach(key => {\n      pendingOperations.add(key);\n    });\n    operations.clear();\n  });\n\n  pendingOperations.forEach(key => {\n    if (resultCache.has(key)) {\n      const operation = (resultCache.get(key) as OperationResult).operation;\n      resultCache.delete(key);\n      reexecuteOperation(client, operation);\n    }\n  });\n};\n\n// Mark typenames on typenameInvalidate for early invalidation\nconst afterQuery = (\n  resultCache: ResultCache,\n  operationCache: OperationCache\n) => (response: OperationResult) => {\n  const { operation, data, error } = response;\n\n  if (data === undefined || data === null) {\n    return;\n  }\n\n  resultCache.set(operation.key, { operation, data, error });\n\n  collectTypesFromResponse(response.data).forEach(typeName => {\n    const operations =\n      operationCache[typeName] || (operationCache[typeName] = new Set());\n    operations.add(operation.key);\n  });\n};\n","import { print } from 'graphql';\n\nimport {\n  filter,\n  make,\n  merge,\n  mergeMap,\n  pipe,\n  share,\n  Source,\n  takeUntil,\n} from 'wonka';\n\nimport { makeResult, makeErrorResult } from '../utils';\n\nimport {\n  Exchange,\n  ExecutionResult,\n  Operation,\n  OperationContext,\n  OperationResult,\n} from '../types';\n\nexport interface ObserverLike<T> {\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\n/** An abstract observable interface conforming to: https://github.com/tc39/proposal-observable */\nexport interface ObservableLike<T> {\n  subscribe(\n    observer: ObserverLike<T>\n  ): {\n    unsubscribe: () => void;\n  };\n}\n\nexport interface SubscriptionOperation {\n  query: string;\n  variables?: object;\n  key: string;\n  context: OperationContext;\n}\n\nexport type SubscriptionForwarder = (\n  operation: SubscriptionOperation\n) => ObservableLike<ExecutionResult & { extensions?: Record<string, any> }>;\n\n/** This is called to create a subscription and needs to be hooked up to a transport client. */\nexport interface SubscriptionExchangeOpts {\n  // This has been modelled to work with subscription-transport-ws\n  // See: https://github.com/apollographql/subscriptions-transport-ws#requestoptions--observableexecutionresult-returns-observable-to-execute-the-operation\n  forwardSubscription: SubscriptionForwarder;\n}\n\nconst isSubscriptionOperation = (operation: Operation) =>\n  operation.operationName === 'subscription';\n\nexport const subscriptionExchange = ({\n  forwardSubscription,\n}: SubscriptionExchangeOpts): Exchange => ({ client, forward }) => {\n  const createSubscriptionSource = (\n    operation: Operation\n  ): Source<OperationResult> => {\n    // This excludes the query's name as a field although subscription-transport-ws does accept it since it's optional\n    const observableish = forwardSubscription({\n      key: operation.key.toString(36),\n      query: print(operation.query),\n      variables: operation.variables,\n      context: { ...operation.context },\n    });\n\n    return make<OperationResult>(([next, complete]) => {\n      let isComplete = false;\n\n      const sub = observableish.subscribe({\n        next: result => next(makeResult(operation, result)),\n        error: err => next(makeErrorResult(operation, err)),\n        complete: () => {\n          if (!isComplete) {\n            client.reexecuteOperation({\n              ...operation,\n              operationName: 'teardown',\n            });\n          }\n\n          complete();\n        },\n      });\n\n      return () => {\n        isComplete = true;\n        sub.unsubscribe();\n      };\n    });\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const subscriptionResults$ = pipe(\n      sharedOps$,\n      filter(isSubscriptionOperation),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.operationName === 'teardown' && op.key === key)\n        );\n\n        return pipe(\n          createSubscriptionSource(operation),\n          takeUntil(teardown$)\n        );\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(op => !isSubscriptionOperation(op)),\n      forward\n    );\n\n    return merge([subscriptionResults$, forward$]);\n  };\n};\n","import { pipe, tap } from 'wonka';\nimport { Exchange } from '../types';\n\nexport const debugExchange: Exchange = ({ forward }) => {\n  if (process.env.NODE_ENV === 'production') {\n    return ops$ => forward(ops$);\n  } else {\n    return ops$ =>\n      pipe(\n        ops$,\n        // eslint-disable-next-line no-console\n        tap(op => console.log('[Exchange debug]: Incoming operation: ', op)),\n        forward,\n        tap(result =>\n          // eslint-disable-next-line no-console\n          console.log('[Exchange debug]: Completed operation: ', result)\n        )\n      );\n  }\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { Exchange, Operation, OperationResult } from '../types';\n\n/** A default exchange for debouncing GraphQL requests. */\nexport const dedupExchange: Exchange = ({ forward }) => {\n  const inFlightKeys = new Set<number>();\n\n  const filterIncomingOperation = (operation: Operation) => {\n    const { key, operationName } = operation;\n    if (operationName === 'teardown') {\n      inFlightKeys.delete(key);\n      return true;\n    } else if (operationName !== 'query') {\n      return true;\n    }\n\n    const isInFlight = inFlightKeys.has(key);\n    inFlightKeys.add(key);\n    return !isInFlight;\n  };\n\n  const afterOperationResult = ({ operation }: OperationResult) => {\n    inFlightKeys.delete(operation.key);\n  };\n\n  return ops$ => {\n    const forward$ = pipe(\n      ops$,\n      filter(filterIncomingOperation)\n    );\n    return pipe(\n      forward(forward$),\n      tap(afterOperationResult)\n    );\n  };\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { Kind, DocumentNode, OperationDefinitionNode, print } from 'graphql';\nimport { filter, make, merge, mergeMap, pipe, share, takeUntil } from 'wonka';\nimport { Exchange, Operation, OperationResult } from '../types';\nimport { makeResult, makeErrorResult } from '../utils';\n\ninterface Body {\n  query: string;\n  variables: void | object;\n  operationName?: string;\n}\n\n/** A default exchange for fetching GraphQL requests. */\nexport const fetchExchange: Exchange = ({ forward }) => {\n  const isOperationFetchable = (operation: Operation) => {\n    const { operationName } = operation;\n    return operationName === 'query' || operationName === 'mutation';\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const fetchResults$ = pipe(\n      sharedOps$,\n      filter(isOperationFetchable),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.operationName === 'teardown' && op.key === key)\n        );\n\n        return pipe(\n          createFetchSource(operation),\n          takeUntil(teardown$)\n        );\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(op => !isOperationFetchable(op)),\n      forward\n    );\n\n    return merge([fetchResults$, forward$]);\n  };\n};\n\nconst getOperationName = (query: DocumentNode): string | null => {\n  const node = query.definitions.find(\n    (node: any): node is OperationDefinitionNode => {\n      return node.kind === Kind.OPERATION_DEFINITION && node.name;\n    }\n  );\n\n  return node !== undefined && node.name ? node.name.value : null;\n};\n\nconst createFetchSource = (operation: Operation) => {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    operation.operationName === 'subscription'\n  ) {\n    throw new Error(\n      'Received a subscription operation in the httpExchange. You are probably trying to create a subscription. Have you added a subscriptionExchange?'\n    );\n  }\n\n  return make<OperationResult>(([next, complete]) => {\n    const abortController =\n      typeof AbortController !== 'undefined'\n        ? new AbortController()\n        : undefined;\n\n    const { context } = operation;\n\n    const extraOptions =\n      typeof context.fetchOptions === 'function'\n        ? context.fetchOptions()\n        : context.fetchOptions || {};\n\n    const operationName = getOperationName(operation.query);\n\n    const body: Body = {\n      query: print(operation.query),\n      variables: operation.variables,\n    };\n\n    if (operationName !== null) {\n      body.operationName = operationName;\n    }\n\n    const fetchOptions = {\n      body: JSON.stringify(body),\n      method: 'POST',\n      ...extraOptions,\n      headers: {\n        'content-type': 'application/json',\n        ...extraOptions.headers,\n      },\n      signal:\n        abortController !== undefined ? abortController.signal : undefined,\n    };\n\n    executeFetch(operation, fetchOptions).then(result => {\n      if (result !== undefined) {\n        next(result);\n      }\n\n      complete();\n    });\n\n    return () => {\n      if (abortController !== undefined) {\n        abortController.abort();\n      }\n    };\n  });\n};\n\nconst executeFetch = (operation: Operation, opts: RequestInit) => {\n  const { url, fetch: fetcher } = operation.context;\n\n  let response: Response | undefined;\n\n  return (fetcher || fetch)(url, opts)\n    .then(res => {\n      const { status } = res;\n      const statusRangeEnd = opts.redirect === 'manual' ? 400 : 300;\n      response = res;\n\n      if (status < 200 || status >= statusRangeEnd) {\n        throw new Error(res.statusText);\n      } else {\n        return res.json();\n      }\n    })\n    .then(result => makeResult(operation, result, response))\n    .catch(err => {\n      if (err.name !== 'AbortError') {\n        return makeErrorResult(operation, err, response);\n      }\n    });\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { ExchangeIO, Operation } from '../types';\n\n/** This is always the last exchange in the chain; No operation should ever reach it */\nexport const fallbackExchangeIO: ExchangeIO = ops$ =>\n  pipe(\n    ops$,\n    tap<Operation>(({ operationName }) => {\n      if (\n        operationName !== 'teardown' &&\n        process.env.NODE_ENV !== 'production'\n      ) {\n        console.warn(\n          `No exchange has handled operations of type \"${operationName}\". Check whether you've added an exchange responsible for these operations.`\n        );\n      }\n    }),\n    /* All operations that skipped through the entire exchange chain should be filtered from the output */\n    filter<any>(() => false)\n  );\n","import { Exchange } from '../types';\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeExchanges = (exchanges: Exchange[]): Exchange => {\n  if (exchanges.length === 1) {\n    return exchanges[0];\n  }\n\n  return ({ client, forward: outerForward }) => {\n    return exchanges.reduceRight((forward, exchange) => {\n      return exchange({ client, forward });\n    }, outerForward);\n  };\n};\n","export { ssrExchange } from './ssr';\nexport { cacheExchange } from './cache';\nexport { subscriptionExchange } from './subscription';\nexport { debugExchange } from './debug';\nexport { dedupExchange } from './dedup';\nexport { fetchExchange } from './fetch';\nexport { fallbackExchangeIO } from './fallback';\nexport { composeExchanges } from './compose';\n\nimport { cacheExchange } from './cache';\nimport { dedupExchange } from './dedup';\nimport { fetchExchange } from './fetch';\n\nexport const defaultExchanges = [dedupExchange, cacheExchange, fetchExchange];\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport {\n  filter,\n  makeSubject,\n  onEnd,\n  onStart,\n  pipe,\n  share,\n  Source,\n  take,\n  takeUntil,\n  merge,\n  interval,\n  fromValue,\n  switchMap,\n} from 'wonka';\n\nimport {\n  composeExchanges,\n  defaultExchanges,\n  fallbackExchangeIO,\n} from './exchanges';\n\nimport {\n  Exchange,\n  GraphQLRequest,\n  Operation,\n  OperationContext,\n  OperationResult,\n  OperationType,\n  RequestPolicy,\n  PromisifiedSource,\n} from './types';\n\nimport { createRequest, toSuspenseSource, withPromise } from './utils';\nimport { DocumentNode } from 'graphql';\n\n/** Options for configuring the URQL [client]{@link Client}. */\nexport interface ClientOptions {\n  /** Target endpoint URL such as `https://my-target:8080/graphql`. */\n  url: string;\n  /** Any additional options to pass to fetch. */\n  fetchOptions?: RequestInit | (() => RequestInit);\n  /** An alternative fetch implementation. */\n  fetch?: typeof fetch;\n  /** An ordered array of Exchanges. */\n  exchanges?: Exchange[];\n  /** Activates support for Suspense. */\n  suspense?: boolean;\n  /** The default request policy for requests. */\n  requestPolicy?: RequestPolicy;\n}\n\ninterface ActiveOperations {\n  [operationKey: string]: number;\n}\n\nexport const createClient = (opts: ClientOptions) => new Client(opts);\n\n/** The URQL application-wide client library. Each execute method starts a GraphQL request and returns a stream of results. */\nexport class Client {\n  // These are variables derived from ClientOptions\n  url: string;\n  fetch?: typeof fetch;\n  fetchOptions?: RequestInit | (() => RequestInit);\n  exchange: Exchange;\n  suspense: boolean;\n  requestPolicy: RequestPolicy;\n\n  // These are internals to be used to keep track of operations\n  dispatchOperation: (operation: Operation) => void;\n  operations$: Source<Operation>;\n  results$: Source<OperationResult>;\n  activeOperations = Object.create(null) as ActiveOperations;\n\n  constructor(opts: ClientOptions) {\n    this.url = opts.url;\n    this.fetchOptions = opts.fetchOptions;\n    this.fetch = opts.fetch;\n    this.suspense = !!opts.suspense;\n    this.requestPolicy = opts.requestPolicy || 'cache-first';\n\n    // This subject forms the input of operations; executeOperation may be\n    // called to dispatch a new operation on the subject\n    const [operations$, nextOperation] = makeSubject<Operation>();\n    this.operations$ = operations$;\n\n    // Internally operations aren't always dispatched immediately\n    // Since exchanges can dispatch and reexecute operations themselves,\n    // if we're inside an exchange we instead queue the operation and flush\n    // them in order after\n    const queuedOperations: Operation[] = [];\n    let isDispatching = false;\n\n    this.dispatchOperation = (operation: Operation) => {\n      queuedOperations.push(operation);\n      if (!isDispatching) {\n        isDispatching = true;\n        let queued;\n        while ((queued = queuedOperations.shift()) !== undefined)\n          nextOperation(queued);\n        isDispatching = false;\n      }\n    };\n\n    const exchanges =\n      opts.exchanges !== undefined ? opts.exchanges : defaultExchanges;\n\n    // All exchange are composed into a single one and are called using the constructed client\n    // and the fallback exchange stream\n    this.exchange = composeExchanges(exchanges);\n\n    // All operations run through the exchanges in a pipeline-like fashion\n    // and this observable then combines all their results\n    this.results$ = share(\n      this.exchange({\n        client: this,\n        forward: fallbackExchangeIO,\n      })(this.operations$)\n    );\n  }\n\n  private createOperationContext = (\n    opts?: Partial<OperationContext>\n  ): OperationContext => {\n    const { requestPolicy = this.requestPolicy } = opts || {};\n\n    return {\n      url: this.url,\n      fetchOptions: this.fetchOptions,\n      fetch: this.fetch,\n      ...opts,\n      requestPolicy,\n    };\n  };\n\n  createRequestOperation = (\n    type: OperationType,\n    { key, query, variables }: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Operation => ({\n    key,\n    query,\n    variables,\n    operationName: type,\n    context: this.createOperationContext(opts),\n  });\n\n  /** Counts up the active operation key and dispatches the operation */\n  private onOperationStart(operation: Operation) {\n    const { key } = operation;\n    this.activeOperations[key] = (this.activeOperations[key] || 0) + 1;\n    this.dispatchOperation(operation);\n  }\n\n  /** Deletes an active operation's result observable and sends a teardown signal through the exchange pipeline */\n  private onOperationEnd(operation: Operation) {\n    const { key } = operation;\n    const prevActive = this.activeOperations[key] || 0;\n    const newActive = (this.activeOperations[key] =\n      prevActive <= 0 ? 0 : prevActive - 1);\n\n    if (newActive <= 0) {\n      this.dispatchOperation({ ...operation, operationName: 'teardown' });\n    }\n  }\n\n  /** Executes an Operation by sending it through the exchange pipeline It returns an observable that emits all related exchange results and keeps track of this observable's subscribers. A teardown signal will be emitted when no subscribers are listening anymore. */\n  executeRequestOperation(operation: Operation): Source<OperationResult> {\n    const { key, operationName } = operation;\n    const operationResults$ = pipe(\n      this.results$,\n      filter(res => res.operation.key === key)\n    );\n\n    if (operationName === 'mutation') {\n      // A mutation is always limited to just a single result and is never shared\n      return pipe(\n        operationResults$,\n        onStart<OperationResult>(() => this.dispatchOperation(operation)),\n        take(1)\n      );\n    }\n\n    const teardown$ = pipe(\n      this.operations$,\n      filter(op => op.operationName === 'teardown' && op.key === key)\n    );\n\n    const result$ = pipe(\n      operationResults$,\n      takeUntil(teardown$),\n      onStart<OperationResult>(() => this.onOperationStart(operation)),\n      onEnd<OperationResult>(() => this.onOperationEnd(operation))\n    );\n\n    return (operation.context.suspense || this.suspense) &&\n      operationName === 'query'\n      ? toSuspenseSource(result$)\n      : result$;\n  }\n\n  reexecuteOperation = (operation: Operation) => {\n    // Reexecute operation only if any subscribers are still subscribed to the\n    // operation's exchange results\n    if ((this.activeOperations[operation.key] || 0) > 0) {\n      this.dispatchOperation(operation);\n    }\n  };\n\n  query(\n    query: DocumentNode | string,\n    variables?: object,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult> {\n    if (!context || typeof context.suspense !== 'boolean') {\n      context = { ...context, suspense: false };\n    }\n\n    return withPromise<OperationResult>(\n      this.executeQuery(createRequest(query, variables), context)\n    );\n  }\n\n  executeQuery = (\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult> => {\n    const operation = this.createRequestOperation('query', query, opts);\n    const response$ = this.executeRequestOperation(operation);\n    const { pollInterval } = operation.context;\n\n    if (pollInterval) {\n      return pipe(\n        merge([fromValue(0), interval(pollInterval)]),\n        switchMap(() => response$)\n      );\n    }\n\n    return response$;\n  };\n\n  executeSubscription = (\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult> => {\n    const operation = this.createRequestOperation('subscription', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n\n  mutation(\n    query: DocumentNode | string,\n    variables?: object,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult> {\n    return withPromise<OperationResult>(\n      this.executeMutation(createRequest(query, variables), context)\n    );\n  }\n\n  executeMutation = (\n    query: GraphQLRequest,\n    opts?: Partial<OperationContext>\n  ): Source<OperationResult> => {\n    const operation = this.createRequestOperation('mutation', query, opts);\n    return this.executeRequestOperation(operation);\n  };\n}\n","import { pipe, make, onPush, onEnd, subscribe, Source } from 'wonka';\n\n/** This converts a Source to a suspense Source; It will forward the first result synchronously or throw a promise that resolves when the result becomes available */\nexport const toSuspenseSource = <T>(source: Source<T>): Source<T> => {\n  // Create a new Source from scratch so we have full control over the Source's lifecycle\n  return make(([push, end]) => {\n    let isCancelled = false;\n    let resolveSuspense;\n    let synchronousResult;\n\n    const [teardown] = pipe(\n      source,\n      // The onPush and onEnd forward the underlying results as usual, so that when no\n      // suspense promise is thrown, the source behaves as it normally would\n      onPush(push),\n      onEnd(end),\n      subscribe(value => {\n        // When this operation resolved synchronously assign the result to\n        // synchronousResult which will be picked up below\n        if (resolveSuspense === undefined) {\n          synchronousResult = value;\n        } else if (!isCancelled) {\n          // Otherwise resolve the thrown promise,\n          resolveSuspense(value);\n          // And end and teardown both sources, since suspense will abort the\n          // underlying rendering component anyway\n          end();\n          teardown();\n        }\n      })\n    );\n\n    // If we have a synchronous result, push it onto this source, which is synchronous\n    // otherwise throw a new promise which will resolve later\n    if (synchronousResult === undefined) {\n      throw new Promise(resolve => {\n        resolveSuspense = resolve;\n      });\n    }\n\n    // Since promises aren't cancellable we have a flag that prevents\n    // the thrown promise from resolving if this source is cancelled\n    return () => {\n      isCancelled = true;\n      teardown();\n    };\n  });\n};\n","import { createContext, useContext } from 'react';\nimport { Client, createClient } from './client';\n\n// We assume some default options here; mainly not to actually be used\n// but not to error catastrophically if someone is just playing around\nconst defaultClient = createClient({ url: '/graphql' });\n\nexport const Context = createContext<Client>(defaultClient);\nexport const Provider = Context.Provider;\nexport const Consumer = Context.Consumer;\n\nlet hasWarnedAboutDefault = false;\n\nexport const useClient = (overrideClient?: Client): Client => {\n  const client = useContext(Context);\n\n  if (overrideClient) {\n    return overrideClient;\n  }\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    client === defaultClient &&\n    !hasWarnedAboutDefault\n  ) {\n    hasWarnedAboutDefault = true;\n\n    console.warn(\n      \"Default Client: No client has been specified using urql's Provider.\" +\n        'This means that urql will be falling back to defaults including making ' +\n        'requests to `/graphql`.\\n' +\n        \"If that's not what you want, please create a client and add a Provider.\"\n    );\n  }\n\n  return client;\n};\n","import {\n  useRef,\n  useState,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n} from 'react';\n\ntype SetStateAction<S> = S | ((prevState: S) => S);\ntype SetState<S> = (action: SetStateAction<S>) => void;\n\n// See https://github.com/reduxjs/react-redux/blob/316467a/src/hooks/useSelector.js#L6-L15\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\n/**\n * This is a drop-in replacement for useState, limited to object-based state.\n * During initial mount it will mutably update the state, instead of scheduling\n * a React update using setState\n */\nexport const useImmediateState = <S extends {}>(init: S): [S, SetState<S>] => {\n  const isMounted = useRef(false);\n  const [state, setState] = useState<S>(init);\n\n  // This wraps setState and updates the state mutably on initial mount\n  const updateState: SetState<S> = useCallback(\n    (action: SetStateAction<S>): void => {\n      if (!isMounted.current) {\n        const newState =\n          typeof action === 'function'\n            ? (action as (arg: S) => S)(state)\n            : action;\n        Object.assign(state, newState);\n      } else {\n        setState(action);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [state, updateState];\n};\n","import { DocumentNode } from 'graphql';\nimport { useCallback } from 'react';\nimport { pipe, toPromise } from 'wonka';\nimport { useClient } from '../context';\nimport { OperationResult, OperationContext } from '../types';\nimport { CombinedError, createRequest } from '../utils';\nimport { useImmediateState } from './useImmediateState';\nimport { Client } from '../client';\n\nexport interface UseMutationState<T> {\n  fetching: boolean;\n  data?: T;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n}\n\nexport type UseMutationResponse<T, V> = [\n  UseMutationState<T>,\n  (\n    variables?: V,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<T>>\n];\n\nexport const useMutation = <T = any, V = object>(\n  query: DocumentNode | string,\n  client?: Client\n): UseMutationResponse<T, V> => {\n  const _client = useClient(client);\n  const [state, setState] = useImmediateState<UseMutationState<T>>({\n    fetching: false,\n    error: undefined,\n    data: undefined,\n    extensions: undefined,\n  });\n\n  const executeMutation = useCallback(\n    (variables?: V, context?: Partial<OperationContext>) => {\n      setState({\n        fetching: true,\n        error: undefined,\n        data: undefined,\n        extensions: undefined,\n      });\n\n      const request = createRequest(query, variables as any);\n\n      return pipe(\n        _client.executeMutation(request, context || {}),\n        toPromise\n      ).then(result => {\n        const { data, error, extensions } = result;\n        setState({ fetching: false, data, error, extensions });\n        return result;\n      });\n    },\n    [_client, query, setState]\n  );\n\n  return [state, executeMutation];\n};\n","import { DocumentNode } from 'graphql';\nimport { useRef, useMemo } from 'react';\nimport { GraphQLRequest } from '../types';\nimport { createRequest } from '../utils';\n\n/** Creates a request from a query and variables but preserves reference equality if the key isn't changing */\nexport const useRequest = (\n  query: string | DocumentNode,\n  variables?: any\n): GraphQLRequest => {\n  const prev = useRef<undefined | GraphQLRequest>(undefined);\n\n  return useMemo(() => {\n    const request = createRequest(query, variables);\n    // We manually ensure reference equality if the key hasn't changed\n    if (prev.current !== undefined && prev.current.key === request.key) {\n      return prev.current;\n    } else {\n      prev.current = request;\n      return request;\n    }\n  }, [query, variables]);\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { useRef, useEffect, EffectCallback } from 'react';\nimport { noop } from '../utils';\n\n/** This is a drop-in replacement for useEffect that will execute the first effect that happens during initial mount synchronously */\nexport const useImmediateEffect = (\n  effect: EffectCallback,\n  changes: ReadonlyArray<any>\n) => {\n  const teardown = useRef<() => void>(noop);\n  const isMounted = useRef<boolean>(false);\n\n  // On initial render we just execute the effect\n  if (!isMounted.current) {\n    // There's the slight possibility that we had an interrupt due to\n    // conccurrent mode after running the effect.\n    // This could result in memory leaks.\n    teardown.current();\n    teardown.current = effect() || noop;\n  }\n\n  useEffect(() => {\n    // Initially we skip executing the effect since we've already done so on\n    // initial render, then we execute it as usual\n    return isMounted.current\n      ? effect()\n      : ((isMounted.current = true), teardown.current);\n  }, changes);\n};\n","import { DocumentNode } from 'graphql';\nimport { useCallback, useRef } from 'react';\nimport { pipe, onEnd, subscribe } from 'wonka';\nimport { useClient } from '../context';\nimport { OperationContext, RequestPolicy } from '../types';\nimport { CombinedError, noop } from '../utils';\nimport { Client } from '../client';\nimport { useRequest } from './useRequest';\nimport { useImmediateEffect } from './useImmediateEffect';\nimport { useImmediateState } from './useImmediateState';\n\nexport interface UseQueryArgs<V> {\n  query: string | DocumentNode;\n  variables?: V;\n  requestPolicy?: RequestPolicy;\n  pollInterval?: number;\n  context?: Partial<OperationContext>;\n  client?: Client;\n  pause?: boolean;\n}\n\nexport interface UseQueryState<T> {\n  fetching: boolean;\n  data?: T;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n}\n\nexport type UseQueryResponse<T> = [\n  UseQueryState<T>,\n  (opts?: Partial<OperationContext>) => void\n];\n\nexport const useQuery = <T = any, V = object>(\n  args: UseQueryArgs<V>\n): UseQueryResponse<T> => {\n  const unsubscribe = useRef(noop);\n  const client = useClient(args.client);\n\n  // This is like useState but updates the state object\n  // immediately, when we're still before the initial mount\n  const [state, setState] = useImmediateState<UseQueryState<T>>({\n    fetching: false,\n    data: undefined,\n    error: undefined,\n    extensions: undefined,\n  });\n\n  // This creates a request which will keep a stable reference\n  // if request.key doesn't change\n  const request = useRequest(args.query, args.variables);\n\n  const executeQuery = useCallback(\n    (opts?: Partial<OperationContext>) => {\n      unsubscribe.current();\n\n      setState(s => ({ ...s, fetching: true }));\n\n      [unsubscribe.current] = pipe(\n        client.executeQuery(request, {\n          requestPolicy: args.requestPolicy,\n          pollInterval: args.pollInterval,\n          ...args.context,\n          ...opts,\n        }),\n        onEnd(() => setState(s => ({ ...s, fetching: false }))),\n        subscribe(({ data, error, extensions }) => {\n          setState({ fetching: false, data, error, extensions });\n        })\n      );\n    },\n    [\n      args.context,\n      args.requestPolicy,\n      args.pollInterval,\n      client,\n      request,\n      setState,\n    ]\n  );\n\n  useImmediateEffect(() => {\n    if (args.pause) {\n      unsubscribe.current();\n      setState(s => ({ ...s, fetching: false }));\n      return noop;\n    }\n\n    executeQuery();\n    return () => unsubscribe.current(); // eslint-disable-line\n  }, [executeQuery, args.pause, setState]);\n\n  return [state, executeQuery];\n};\n","import { DocumentNode } from 'graphql';\nimport { useCallback, useRef } from 'react';\nimport { pipe, onEnd, subscribe } from 'wonka';\nimport { useClient } from '../context';\nimport { CombinedError, noop } from '../utils';\nimport { useRequest } from './useRequest';\nimport { useImmediateEffect } from './useImmediateEffect';\nimport { useImmediateState } from './useImmediateState';\nimport { OperationContext } from '../types';\nimport { Client } from '../client';\n\nexport interface UseSubscriptionArgs<V> {\n  query: DocumentNode | string;\n  variables?: V;\n  pause?: boolean;\n  context?: Partial<OperationContext>;\n  client?: Client;\n}\n\nexport type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;\n\nexport interface UseSubscriptionState<T> {\n  fetching: boolean;\n  data?: T;\n  error?: CombinedError;\n  extensions?: Record<string, any>;\n}\n\nexport type UseSubscriptionResponse<T> = [\n  UseSubscriptionState<T>,\n  (opts?: Partial<OperationContext>) => void\n];\n\nexport const useSubscription = <T = any, R = T, V = object>(\n  args: UseSubscriptionArgs<V>,\n  handler?: SubscriptionHandler<T, R>\n): UseSubscriptionResponse<R> => {\n  const unsubscribe = useRef(noop);\n  const handlerRef = useRef(handler);\n  const client = useClient(args.client);\n\n  const [state, setState] = useImmediateState<UseSubscriptionState<R>>({\n    fetching: false,\n    error: undefined,\n    data: undefined,\n    extensions: undefined,\n  });\n\n  // Update handler on constant ref, since handler changes shouldn't\n  // trigger a new subscription run\n  handlerRef.current = handler;\n\n  // This creates a request which will keep a stable reference\n  // if request.key doesn't change\n  const request = useRequest(args.query, args.variables);\n\n  const executeSubscription = useCallback(\n    (opts?: Partial<OperationContext>) => {\n      unsubscribe.current();\n\n      setState(s => ({ ...s, fetching: true }));\n\n      [unsubscribe.current] = pipe(\n        client.executeSubscription(request, {\n          ...args.context,\n          ...opts,\n        }),\n        onEnd(() => setState(s => ({ ...s, fetching: false }))),\n        subscribe(({ data, error, extensions }) => {\n          const { current: handler } = handlerRef;\n\n          setState(s => ({\n            fetching: true,\n            data: typeof handler === 'function' ? handler(s.data, data) : data,\n            error,\n            extensions,\n          }));\n        })\n      );\n    },\n    [client, request, setState, args.context]\n  );\n\n  useImmediateEffect(() => {\n    if (args.pause) {\n      unsubscribe.current();\n      setState(s => ({ ...s, fetching: false }));\n      return noop;\n    }\n\n    executeSubscription();\n    return () => unsubscribe.current(); // eslint-disable-line\n  }, [executeSubscription, args.pause, setState]);\n\n  return [state, executeSubscription];\n};\n","import { ReactElement } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { OperationResult, OperationContext } from '../types';\nimport { useMutation, UseMutationState } from '../hooks';\n\nexport interface MutationProps<T, V> {\n  query: DocumentNode | string;\n  children: (arg: MutationState<T, V>) => ReactElement<any>;\n}\n\nexport interface MutationState<T, V> extends UseMutationState<T> {\n  executeMutation: (\n    variables?: V,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<T>>;\n}\n\nexport function Mutation<T = any, V = any>({\n  children,\n  query,\n}: MutationProps<T, V>): ReactElement<any> {\n  const [state, executeMutation] = useMutation<T, V>(query);\n  return children({ ...state, executeMutation });\n}\n","import { ReactElement } from 'react';\nimport { OperationContext } from '../types';\nimport { useQuery, UseQueryArgs, UseQueryState } from '../hooks';\n\nexport interface QueryProps<T, V> extends UseQueryArgs<V> {\n  children: (arg: QueryState<T>) => ReactElement<any>;\n}\n\nexport interface QueryState<T> extends UseQueryState<T> {\n  executeQuery: (opts?: Partial<OperationContext>) => void;\n}\n\nexport function Query<T = any, V = any>(\n  props: QueryProps<T, V>\n): ReactElement<any> {\n  const [state, executeQuery] = useQuery<T, V>(props);\n  return props.children({ ...state, executeQuery });\n}\n","import { ReactElement } from 'react';\nimport { OperationContext } from '../types';\n\nimport {\n  useSubscription,\n  UseSubscriptionArgs,\n  UseSubscriptionState,\n  SubscriptionHandler,\n} from '../hooks';\n\nexport interface SubscriptionProps<T, R, V> extends UseSubscriptionArgs<V> {\n  handler?: SubscriptionHandler<T, R>;\n  children: (arg: SubscriptionState<R>) => ReactElement<any>;\n}\n\nexport interface SubscriptionState<T> extends UseSubscriptionState<T> {\n  executeSubscription: (opts?: Partial<OperationContext>) => void;\n}\n\nexport function Subscription<T = any, R = T, V = any>(\n  props: SubscriptionProps<T, R, V>\n): ReactElement<any> {\n  const [state, executeSubscription] = useSubscription<T, R, V>(\n    props,\n    props.handler\n  );\n  return props.children({ ...state, executeSubscription });\n}\n"],"names":["const","generateErrorMessage","networkErr","graphQlErrs","error","undefined","message","forEach","err","trim","rehydrateGraphQlError","GraphQLError","nodes","source","positions","path","originalError","extensions","this","CombinedError","ref","normalizedGraphQLErrors","map","networkError","super","name","graphQLErrors","response","toString","Error","phash","h","x","let","i","l","length","charCodeAt","seen","Set","stringify","isFinite","JSON","out","Array","isArray","value","has","TypeError","keys","Object","sort","add","key","delete","stringifyVariables","clear","hashQuery","q","replace","docs","create","createRequest","vars","query","parse","print","variables","addMetadata","meta","context","makeResult","operation","result","data","errors","makeErrorResult","collectTypes","obj","types","inner","prototype","hasOwnProperty","call","val","push","v","a","indexOf","collectTypesFromResponse","filter","s","kind","formatNode","n","selectionSet","selections","some","Kind","FIELD","NAME","formatDocument","astNode","visit","Field","InlineFragment","withPromise","source$","toPromise","take","noop","shouldSkip","operationName","serializeResult","deserializeResult","deserialized","op","cacheOutcome","cacheExchange","resultCache","Map","operationCache","mapTypeNames","handleAfterMutation","afterMutation","client","handleAfterQuery","afterQuery","isOperationCached","requestPolicy","cachedResult","get","reexecuteOperation","ops$","sharedOps$","share","cachedOps$","forwardedOps$","tap","forward","merge","pendingOperations","typeName","operations","set","isSubscriptionOperation","console","log","dedupExchange","inFlightKeys","filterIncomingOperation","isInFlight","afterOperationResult","forward$","fetchExchange","isOperationFetchable","fetchResults$","mergeMap","teardown$","takeUntil","createFetchSource","node","OPERATION_DEFINITION","process","env","NODE_ENV","make","abortController","AbortController","extraOptions","fetchOptions","definitions","find","body","method","headers","signal","executeFetch","then","next","complete","abort","opts","fetch","res","status","redirect","statusText","json","catch","warn","fallbackExchangeIO","composeExchanges","exchanges","reduceRight","exchange","defaultExchanges","createClient","Client","url","type","createOperationContext","activeOperations","dispatchOperation","createRequestOperation","response$","executeRequestOperation","pollInterval","switchMap","fromValue","interval","suspense","makeSubject","operations$","queuedOperations","isDispatching","queued","shift","nextOperation","results$","onOperationStart","onOperationEnd","prevActive","operationResults$","onStart","result$","onEnd","isCancelled","resolveSuspense","synchronousResult","subscribe","end","teardown","onPush","Promise","resolve","executeQuery","mutation","executeMutation","defaultClient","Context","createContext","Provider","Consumer","hasWarnedAboutDefault","useClient","overrideClient","useContext","useIsomorphicLayoutEffect","window","useLayoutEffect","useEffect","useImmediateState","init","isMounted","useRef","useState","updateState","useCallback","action","current","newState","state","setState","useMutation","_client","fetching","request","useRequest","prev","useMemo","useImmediateEffect","effect","changes","useQuery","args","unsubscribe","pause","useSubscription","handler","handlerRef","executeSubscription","Mutation","children","Query","props","Subscription","params","isCached","serialized","ssr","isClient","restoreData","restore","_extends","extractData","initialState","subscriptionResults$","observableish","forwardSubscription","isComplete","sub","createSubscriptionSource"],"mappings":"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"}